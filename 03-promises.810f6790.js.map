{"mappings":"YA6CA,SAASA,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GACTC,YAAW,WACLC,KAAKC,SAAW,GAEpCJ,EAAQ,CAAEH,WAAUC,UAEpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAIMO,SAASC,cAAc,SAE/BC,iBAAiB,UAAU,SAACC,GAC/BA,EAAMC,iBAIN,IAHA,IAAMX,EAAQY,SAASL,SAASC,cAAc,uBAAuBK,OAC/DC,EAAOF,SAASL,SAASC,cAAc,sBAAsBK,OAC7DE,EAASH,SAASL,SAASC,cAAc,wBAAwBK,OAC9DG,EAAI,EAAGA,EAAID,EAAQC,IAC1BlB,EAAckB,EAAGhB,EAAQc,EAAOE,GAC7BC,MAAK,SAACC,GACLC,QAAQC,IAAI,WAAkDC,OAAvCH,EAAOnB,SAAS,yBAAoCsB,OAAbH,EAAOlB,O,IAEtEsB,OAAM,SAACC,GACNJ,QAAQC,IAAI,WAAiDC,OAAtCE,EAAMxB,SAAS,yBAAmCsB,OAAZE,EAAMvB,O","sources":["src/js/03-promises.js"],"sourcesContent":["// import Notiflix from 'notiflix';\n\n// const delay1 = document.querySelector(\"input[name='delay']\");\n// const step1 = document.querySelector(\"input[name='step']\")\n// const amount1 = document.querySelector(\"input[name='amount']\")\n\n\n// const delay = parseInt(delay1.value);\n// const step = parseInt(step1.value);\n// const amount = parseInt(amount1.value);\n\n\n\n// document.querySelector('.form').addEventListener('submit', Event);\n\n\n\n// function createPromise(position, delay) {\n \n//   const promis = new Promise ((resolve, reject) => {\n//     setTimeout(() => {\n//       const shouldResolve = Math.random() < 0.5;\n//       if (shouldResolve) {\n//         resolve({ position, delay })\n//       } else {\n//         reject({ position, delay })\n//       }\n//     }, delay + step)\n//   });\n//   return promis;\n// }\n\n// function Event(e) {\n//   e.preventDefault();\n \n// for (let i = 0; i < amount; i++) {\n//   createPromise(i, delay).then((result) => {\n//     Notiflix.Notify.warning(`✅ Fulfilled promise ${result.position} in ${result.delay}ms`);\n//     })\n//     .catch((error) => {\n//       Notiflix.Notify.warning(`❌ Rejected promise ${error.position} in ${error.delay}ms`);\n//     });\n// }\n// };\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const timeoutId = setTimeout(() => {\n      const shouldResolve = Math.random() < 0.3;\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', (event) => {\n  event.preventDefault();\n  const delay = parseInt(document.querySelector(\"input[name='delay']\").value);\n  const step = parseInt(document.querySelector(\"input[name='step']\").value);\n  const amount = parseInt(document.querySelector(\"input[name='amount']\").value);\n  for (let i = 0; i < amount; i++) {\n    createPromise(i, delay + step * i)\n      .then((result) => {\n        console.log(`Promise ${result.position} resolved with delay ${result.delay}`);\n      })\n      .catch((error) => {\n        console.log(`Promise ${error.position} rejected with delay ${error.delay}`);\n      });\n  }\n});"],"names":["$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","document","querySelector","addEventListener","event","preventDefault","parseInt","value","step","amount","i","then","result","console","log","concat","catch","error"],"version":3,"file":"03-promises.810f6790.js.map"}